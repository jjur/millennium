<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
    ==============================
    gGUI v1.2.1
    
    Developed by Christian (kabecao)
    http://hammeronart.com/
    
    A graphical user interface for Game Maker Studio to tweak values in real-time
    
    ==============================
*/

draw_set_font(fontGGUI);

x = 0;
y = 0;
z = 0;

size = 54;
stop = false;
ol = 194;
sh = false;
value = 0.5;

guid = gui_create_gui();

gui_create_string(guid, "text", "gGUI v1.2.1", c_green);
gui_create_watcher(guid, "FPS", fps, c_green);

gui_create_menu(guid, "Object", true, 11, c_black);

gui_create_menu(guid, "Position", true, 3, c_black);
gui_create_slider(guid, "x", x, -view_wview/2, view_wview/2);
gui_create_slider(guid, "y", y, -view_hview/2, view_hview/2);
gui_create_slider(guid, "z", z, -view_hview/2, view_hview/2);

gui_create_checkbox(guid, "stop", stop, c_white);
gui_create_slider(guid, "size", size, 10, 128, $207a37);
gui_create_slider(guid, "outline", ol, 129, 256, c_gray);

gui_create_menu(guid, "Shader", true, 2, c_black);
gui_create_checkbox(guid, "enable", sh, $00ffff);
gui_create_slider(guid, "value", value, 0, 1, $00ffff);

gui_create_button(guid, "Random texture", src_rand_tex, $00ffff/2);

gui_create_button(guid, "Restart", src_restart, $0202a4);
gui_create_button(guid, "Site", src_url, $0202a4);

u_time = shader_get_uniform(sh_bend, 'time');
u_value = shader_get_uniform(sh_bend, 'value');
tex = background_get_texture(backTex0);

time = 0;
spd = 0.1;

d3d_start();
d3d_set_zwriteenable(true);

display_set_gui_size(view_wview,view_hview); // need to be done for mobile
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// Move object
x += (keyboard_check(vk_right)-keyboard_check(vk_left)) * 10;
y += -(keyboard_check(vk_down)-keyboard_check(vk_up)) * 10;

// Updated items
gui_set_value(guid, 'x', x);
gui_set_value(guid, 'y', y);
gui_set_value(guid, 'FPS', fps);

// Interact with gui
gui_check(guid, view_wview-243, 0, mouse_x-view_xview, mouse_y-view_yview);

// Update values
x     = gui_get_value(guid, 'x');
y     = gui_get_value(guid, 'y');
z     = gui_get_value(guid, 'z');
stop  = gui_get_value(guid, 'stop');
size  = gui_get_value(guid, 'size');
ol    = gui_get_value(guid, 'outline');
sh    = gui_get_value(guid, 'enable');
value = gui_get_value(guid, 'value');
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gui_destroy_gui(guid);
d3d_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>gui_draw(guid, view_wview-243, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>d3d_set_projection_ext(128,0,-500, 128,0,0, 0,1,0, 55,view_wview/view_hview,1,32000);

spd += ((!stop*0.1)-spd) * 0.08;
time += spd;

draw_set_color(c_white);

// Random prime numbers everywhere

if sh shader_set(sh_bend);
shader_set_uniform_f(u_time, time);
shader_set_uniform_f(u_value, value);

d3d_transform_add_rotation_x(time*6.67);
d3d_transform_add_rotation_y(time*3.71);
d3d_transform_add_rotation_z(time*1.83);
d3d_transform_add_translation(x,y,z);
d3d_draw_ellipsoid(-size, -size, -size, size, size, size, tex, 2, 2, 32);

d3d_transform_set_rotation_x(time*11.83/2);
d3d_transform_add_rotation_y(time*13.53/2);
d3d_transform_add_rotation_z(time*17.51/2);
d3d_transform_add_translation(x,y,z);
draw_set_color(c_black);
draw_circle(0, 0, ol, 1);

d3d_transform_set_rotation_x(time*12.67/0.87);
d3d_transform_add_rotation_y(time*14.71/3.51);
d3d_transform_add_rotation_z(time*11.37/1.97);
d3d_transform_add_translation(x,y,z);
draw_set_color(c_black);
draw_circle(0, 0, ol/2, 1);
d3d_transform_set_identity();

if sh shader_reset();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
